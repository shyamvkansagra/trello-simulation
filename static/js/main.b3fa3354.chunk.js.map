{"version":3,"sources":["api/api.js","TrelloBoard/TaskItem.js","TrelloBoard/TrelloBoard.js","App.js","serviceWorker.js","index.js"],"names":["getTasks","JSON","parse","window","localStorage","getItem","setTasks","tasks","setItem","stringify","DataApis","checkAndInit","createTask","status","push","id","Date","content","updateTask","filter","t","deleteTask","taskToDeleteIndex","findIndex","splice","colorCodes","TaskItem","props","handleOnChange","e","setState","inputVal","currentTarget","value","saveTask","task","state","this","onDragStart","className","draggable","style","backgroundColor","placeholder","onChange","onBlur","onClick","React","Component","TrelloBoard","addTask","onDragOver","event","preventDefault","dataTransfer","setData","onDrop","getData","componentDidMount","todo","wip","done","forEach","key","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b3fa3354.chunk.js","sourcesContent":["const getTasks = JSON.parse(window.localStorage.getItem(\"tasks\")) || [];\nconst setTasks = (tasks) => window.localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n\nconst DataApis = {\n\tcheckAndInit: () => {\n\t\tif (!window.localStorage.getItem(\"tasks\")) {\n\t\t\twindow.localStorage.setItem(\"tasks\", JSON.stringify([]));\n\t\t}\n\t},\n\tcreateTask: (status) => {\n\t\tconst tasks = getTasks || [];\n\t\ttasks.push({\n\t\t\tid: +new Date(),\n\t\t\tcontent: \"\",\n\t\t\tstatus: status\n\t\t});\n\t\tsetTasks(tasks);\n\t\treturn tasks;\n\t},\n\tgetTasks: () => {\n\t\treturn getTasks;\n\t},\n\tupdateTask: (id, content, status) => {\n\t\tconst tasks = getTasks;\n\t\tconst taskToUpdate = tasks.filter(t => t.id == id)[0];\n\t\ttaskToUpdate.content = content;\n\t\tsetTasks(tasks);\n\t},\n\tdeleteTask: (id) => {\n\t\tconst tasks = getTasks;\n\t\tconst taskToDeleteIndex = tasks.findIndex(t => t.id == id);\n\t\ttasks.splice(taskToDeleteIndex, 1);\n\t\tsetTasks(tasks);\n\t\treturn tasks;\n\t}\n};\n\nexport default DataApis;","import React from 'react';\n\nconst colorCodes = {\n\t\"todo\": \"skyblue\",\n\t\"wip\": \"yellow\",\n\t\"done\": \"lawngreen\"\n};\n\nexport default class TaskItem extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tinputVal: props.task.content\n\t\t}\n\t}\n\n\thandleOnChange = (e) => {\n\t\tthis.setState({ inputVal: e.currentTarget.value });\n\t}\n\n\tsaveTask = () => {\n\t\tconst { DataApis, task } = this.props;\n\t\tconst { inputVal } = this.state;\n\t\tDataApis.updateTask(task.id, inputVal, task.status);\n\t}\n\n\trender() {\n\t\tconst { task, onDragStart, deleteTask } = this.props;\n\t\tconst { inputVal } = this.state;\n\t\treturn (\n\t\t\t<div className=\"task-item-wrap\">\n\t\t\t\t<textarea\n\t\t\t\t\tonDragStart={(e) => onDragStart(e, task.id)}\n\t\t\t\t\tdraggable\n\t\t\t\t\tclassName=\"task-item\"\n\t\t\t\t\tstyle={{ backgroundColor: colorCodes[task.status] }}\n\t\t\t\t\tplaceholder=\"Add something\"\n\t\t\t\t\tvalue={inputVal}\n\t\t\t\t\tonChange={this.handleOnChange}\n\t\t\t\t\tonBlur={this.saveTask}\n\t\t\t\t>{inputVal}</textarea>\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"btn-plain\"\n\t\t\t\t\tonClick={() => deleteTask(task.id)}\n\t\t\t\t>x</button>\n\t\t\t</div>\n\t\t);\n\t}\n}","import React, { Component } from 'react';\nimport TaskItem from './TaskItem';\nimport './styles.scss';\n\nexport default class TrelloBoard extends Component {\n\tstate = {\n\t\ttasks: []\n\t};\n\n\taddTask = (status) => {\n\t\tconst { DataApis } = this.props;\n\t\tconst tasks = DataApis.createTask(status);\n\t\tthis.setState({ tasks });\n\t}\n\n\tdeleteTask = id => {\n\t\tconst { DataApis } = this.props;\n\t\tconst tasks = DataApis.deleteTask(id);\n\t\tthis.setState({ tasks });\n\t}\n\n\tonDragOver = (event) => event.preventDefault();\n\n\tonDragStart = (event, id) => event.dataTransfer.setData(\"id\", id);\n\n\tonDrop = (event, status) => {\n\t\tconst { DataApis } = this.props;\n\t\tlet id = event.dataTransfer.getData(\"id\");\n\t\tlet tasks = this.state.tasks.filter((task) => {\n\t\t\tif (task.id == id) {\n\t\t\t\ttask.status = status;\n\t\t\t}\n\t\t\treturn task;\n\t\t});\n\t\tthis.setState({ tasks }, () => {\n\t\t\tDataApis.updateTask(id, tasks.filter(t => t.id == id)[0].content, status);\n\t\t});\n\t}\n\n\tcomponentDidMount = () => {\n\t\tconst { DataApis } = this.props;\n\t\tconst tasks = DataApis.getTasks() || [];\n\t\tthis.setState({ tasks });\n\t}\n\n\trender() {\n\t\tvar tasks = {\n\t\t\ttodo: [],\n\t\t\twip: [],\n\t\t\tdone: []\n\t\t};\n\t\tconst { DataApis } = this.props;\n\n\t\tthis.state.tasks.forEach((t) => {\n\t\t\ttasks[t.status].push(\n\t\t\t\t<TaskItem\n\t\t\t\t\tkey={t.id}\n\t\t\t\t\ttask={t}\n\t\t\t\t\tonDragStart={(e) => this.onDragStart(e, t.id)}\n\t\t\t\t\tDataApis={DataApis}\n\t\t\t\t\tdeleteTask={this.deleteTask}\n\t\t\t\t/>\n\t\t\t);\n\t\t});\n\t\t\n\t\treturn (\n\t\t\t<div className=\"notes-container\">\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"border-right task-col\"\n\t\t\t\t\tonDragOver={e => this.onDragOver(e)}\n\t\t\t\t\tonDrop={e => this.onDrop(e, \"todo\")}\n\t\t\t\t>\n\t\t\t\t\t<h2>To-do</h2>\n\t\t\t\t\t{tasks.todo}\n\t\t\t\t\t<button className=\"add-task-btn\" onClick={() => this.addTask(\"todo\")}>+ Add task</button>\n\t\t\t\t</div>\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"border-right task-col\"\n\t\t\t\t\tonDragOver={(e) => this.onDragOver(e)}\n\t\t\t\t\tonDrop={(e) => this.onDrop(e, \"wip\")}\n\t\t\t\t>\n\t\t\t\t\t<h2>In Progress</h2>\n\t\t\t\t\t{tasks.wip}\n\t\t\t\t\t<button className=\"add-task-btn\" onClick={() => this.addTask(\"wip\")}>+ Add task</button>\n\t\t\t\t</div>\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"task-col\"\n\t\t\t\t\tonDragOver={(e) => this.onDragOver(e)}\n\t\t\t\t\tonDrop={(e) => this.onDrop(e, \"done\")}\n\t\t\t\t>\n\t\t\t\t\t<h2>Done</h2>\n\t\t\t\t\t{tasks.done}\n\t\t\t\t\t<button className=\"add-task-btn\" onClick={() => this.addTask(\"done\")}>+ Add task</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n","import React from 'react';\nimport './App.css';\nimport DataApis from './api/api';\n\nimport TrelloBoard from './TrelloBoard/TrelloBoard';\n\nfunction App() {\n  DataApis.checkAndInit();\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Trello simulation</h1>  \n      </header>\n      <TrelloBoard DataApis={DataApis} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}